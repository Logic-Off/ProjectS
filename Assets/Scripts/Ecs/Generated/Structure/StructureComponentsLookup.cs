//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class StructureComponentsLookup {
	public const int Id = 0;
	public const int Name = 1;
	public const int NewPosition = 2;
	public const int NewRotation = 3;
	public const int Position = 4;
	public const int Prefab = 5;
	public const int Rotation = 6;

	public const int TotalComponents = 7;

	public static readonly string[] ComponentNames =
	{
		"Id",
		"Name",
		"NewPosition",
		"NewRotation",
		"Position",
		"Prefab",
		"Rotation"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(Ecs.Common.IdComponent),
		typeof(Ecs.Common.NameComponent),
		typeof(Ecs.Common.NewPositionComponent),
		typeof(Ecs.Common.NewRotationComponent),
		typeof(Ecs.Common.PositionComponent),
		typeof(Ecs.Common.PrefabComponent),
		typeof(Ecs.Common.RotationComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(Ecs.Common.IdComponent), 0 },
		{ typeof(Ecs.Common.NameComponent), 1 },
		{ typeof(Ecs.Common.NewPositionComponent), 2 },
		{ typeof(Ecs.Common.NewRotationComponent), 3 },
		{ typeof(Ecs.Common.PositionComponent), 4 },
		{ typeof(Ecs.Common.PrefabComponent), 5 },
		{ typeof(Ecs.Common.RotationComponent), 6 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component) {
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
